"""FastAPI main entrypoint file."""

from pydantic import BaseModel, Field
from fastapi import FastAPI, HTTPException, status, Query, Body
from typing import Annotated, Union
from datetime import datetime

app = FastAPI(
    title="EX01 API Design",
    contact={
        "name": "Daniel Zhang, Kavin Sankar",
        "url": "https://github.com/comp423-25s/ex01-api-design-team_0_86",
    },
    description="""
## Introduction

This API allows you to store text snippets with a unique URL and it allows you to submit a long URL in order to receive a shorter, redirectable URL.
""",
    openapi_tags=[
        {
            "name": "Sue",
            "User looking to share text and URLs with other people.": "Sue Sharer's API Endpoints",
        },
        {
            "name": "Cai",
            "User clicking on the link and seeing the information generated by Sue.": "Cai Clicker's API Endpoints",
        },
        {
            "name": "Amy",
            "Administrator controlling and overseeing resources": "Amy Admin's API Endpoints",
        },
    ],
)


class Resource(BaseModel):
    id: Annotated[
        int,
        Field(
            description="The unique identifier for the text snippet/link",
            examples=[1, 2, 24],
        ),
    ]
    content: Annotated[
        str,
        Field(
            description="The text snippet content or original target link",
            examples=[
                "Hello World!",
                "https://www.google.com/QWLJdhwjdHQLJDWQHLJdaHSJifadhofiewhiofelfdh",
            ],
        ),
    ]
    vanity_url: Annotated[
        str | None,
        Field(
            description="The vanity path URL for the text snippet",
            examples=["exam-solutions", "important-papers"],
        ),
    ] = None
    custom_url: Annotated[
        str | None,
        Field(
            description="The custom URL generated for the original content submitted",
            examples=[
                "www.pastebin.com/exam-solutions",
                "www.pastebin.com/x19Kq%p",
                "short.url/important-papers",
            ],
        ),
    ] = None
    type: Annotated[
        str, Field(description="The type of the resource", examples=["text", "link"])
    ]
    expiration_time: Annotated[
        datetime | None,
        Field(
            description="The date and time when the resource will expire, specified by the user.",
            examples=[datetime.now()],
        ),
    ] = None
    access_count: Annotated[
        int, Field(description="The number of times the resource has been accessed")
    ] = 0


resource_db = {}

# TODO: Add routes here.


# Sue Share
# Post for text sharer
@app.post(
    "/create-text",
    summary="Posting a Text Snippet",
    description="This endpoint will receive a text snippet, generate a random link for the text-snippet, and return the link.",
    status_code=status.HTTP_201_CREATED,
    responses={
        201: {"description": "Resource created successfully."},
        400: {"description": "Improperly formatted request."},
    },
    tags=["Sue"],
)
def create_resource_text(
    resource: Annotated[
        Resource,
        Body(
            description="The text snippet to be shared",
            openapi_examples={
                "User submitted no vanity": {
                    "description": "Text-snippet without a vanity URL or expiration time, before link has been generated",
                    "value": {
                        "id": 3,
                        "content": "Hello World!",
                        "custom_url": "",
                        "vanity_url": "",
                        "type": "text",
                        "expiration_time": None,
                    },
                },
                "User submitted no vanity, link generated": {
                    "description": "Text-snippet without a vanity URL or expiration time, when link has been generated.",
                    "value": {
                        "id": 3,
                        "content": "Hello World!",
                        "custom_url": "www.pastebin.com/Xj1j23",
                        "vanity_url": "",
                        "type": "text",
                        "expiration_time": None,
                    },
                },
                "User submitted vanity": {
                    "description": "Text-snippet with a vanity URL and expiration, before link has been generated.",
                    "value": {
                        "id": 14,
                        "content": "Hello World!",
                        "custom_url": "",
                        "vanity_url": "hello-world",
                        "type": "text",
                        "expiration_time": datetime.now(),
                    },
                },
                "User submitted vanity, link generated": {
                    "description": "Text-snippet with a vanity URL and expiration, when link has been generated.",
                    "value": {
                        "id": 14,
                        "content": "Hello World!",
                        "custom_url": "www.pastebin.com/hello-world",
                        "vanity_url": "hello-world",
                        "type": "text",
                        "expiration_time": datetime.now(),
                    },
                },
            },
        ),
    ]
) -> Resource:
    if resource.id in resource_db:
        raise HTTPException(status_code=400, detail="Resource already exists")
    resource.type = "text"
    resource_db[resource.id] = resource
    return resource


# Post for link shortner
@app.post(
    "/shorten-url",
    summary="Posting a Link",
    description="This endpoint will receive a full URL, shorten the URL, and return the shortened URL.",
    status_code=status.HTTP_201_CREATED,
    tags=["Sue"],
)
def create_resource_link(
    resource: Annotated[
        Resource,
        Body(
            description="The link to be shortened",
            openapi_examples={
                "Pre-shortened": {
                    "description": "Link before being shortened",
                    "value": {
                        "id": 1,
                        "content": "https://fastapi.tiangolo.com/reference/parameters/?h=path%28#fastapi.Query",
                        "custom_url": "",
                        "vanity_url": "query-stuff",
                        "type": "link",
                        "expiration_time": None,
                    },
                },
                "Post-shortened": {
                    "description": "Link after being shortened",
                    "value": {
                        "id": 1,
                        "content": "https://fastapi.tiangolo.com/reference/parameters/?h=path%28#fastapi.Query",
                        "custom_url": "short.url/query-stuff",
                        "vanity_url": "query-stuff",
                        "type": "link",
                        "expiration_time": None,
                    },
                },
            },
        ),
    ]
):
    if resource.id in resource_db:
        raise HTTPException(status_code=400, detail="Resource already exists")
    resource.type = "link"
    resource_db[resource.id] = resource
    return resource


# Cai Clicker


# Get for text snippet and link (same one)
@app.get(
    "/{resource_identifier}",
    summary="Identifies and return resource content.",
    description="This endpoint will identify which resource this resource identifier points to (link or text), then returns the resource content.",
    responses={
        404: {"description": "Resource not found"},
    },
    tags=["Cai"],
)
def get_resource(resource_id: int) -> Resource:
    if resource_id not in resource_db:
        raise HTTPException(status_code=404, detail="Resource not found")
    return resource_db[resource_id]


# Amy Admin


# Get for all active resources
@app.get(
    "/admin/resources",
    tags=["Amy"],
    summary="Get all active resources",
    description="This endpoint will return all active resources, both shortened-links and text-snippets.",
    responses={404: {"description": "Resources not found"}},
)
def get_resources(
    type: Annotated[
        str | None,
        Query(description="Filter by type", examples=["text-snippet", "short-link"]),
    ] = None,
    sort: Annotated[
        int | None,
        Query(ge=0, description="Sort by resource minimum views", examples=[0, 1, 50]),
    ] = None,
) -> list[Resource]:
    return list(resource_db.values())


# Get for how often a resource has been accessed
@app.get(
    "/admin/resources/{resource_id}",
    tags=["Amy"],
    summary="Get number of times a resource has been accessed",
    description="This endpoint will return the number of times a resource has been accessed.",
    responses={
        404: {"description": "Resource not found"},
    },
)
def get_resource_access_count(resource_id: int) -> int:
    if resource_id not in resource_db:
        raise HTTPException(status_code=404, detail="Resource not found")
    return resource_db[resource_id].access_count


# Patch for updating content of text snippet/changing target of link
@app.patch(
    "/admin/resources/{resource_id}",
    tags=["Amy"],
    summary="Update resource content",
    description="This endpoint will update the content of a text snipping or custom link.",
    responses={
        204: {"description": "Successful patch, no content to return."},
        400: {"description": "Patch is invalid"},
        404: {"description": "Resource not found"},
    },
)
def update_resource(
    resource_id: int,
    new_content: Annotated[
        str,
        Body(
            description="The new content for the resource",
            openapi_examples={
                "Updating text": {
                    "description": "Updating text content",
                    "value": "Hello World!",
                },
                "Updating link": {
                    "description": "Updating link target",
                    "value": "https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#use-annotated-in-the-type-for-the-q-parameter",
                },
            },
        ),
    ],
):
    if resource_id not in resource_db:
        raise HTTPException(status_code=404, detail="Resource not found")
    return


# Delete for removing a resource
@app.delete(
    "/admin/resources/{resource_id}",
    tags=["Amy"],
    summary="Delete a resource",
    description="This endpoint will delete a resource.",
    responses={
        204: {"description": "Resource deleted successfully."},
        404: {"description": "Resource not found."},
    },
)
def delete_resource(resource_id: int) -> Resource:
    if resource_id not in resource_db:
        raise HTTPException(status_code=404, detail="Resource not found")
    return resource_db.pop(resource_id)
